<?php

namespace WorkflowBundle\Repository;

use WorkflowBundle\Entity\NodeAssignment;

/**
 * NodeAssignmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 * //fixme \Common\Util\EntityRepository是我业务中使用的，如果是别的项目，请用 \Doctrine\ORM\EntityRepository 代替
 */
class NodeAssignmentRepository extends \Common\Util\EntityRepository
{

    protected $notifyTasks = [];

    /**
     * @param \WorkflowBundle\Entity\NodeAssignment $nodeAssignment
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function storeNodeAssignment($nodeAssignment)
    {
        $currentTime = time();
        if (!$nodeAssignment->getAssignedTime()) {
            $nodeAssignment->setAssignedTime($currentTime);
        }

        if (!$nodeAssignment->getNodeStatus()) {
            $nodeAssignment->setNodeStatus(NodeAssignment::STATUS_NEW);
        }
        if (!$nodeAssignment->getIsWorkflowLauncher()) {
            $nodeAssignment->setIsWorkflowLauncher(false);
        }

        $this->_em->persist($nodeAssignment);
        $this->_em->flush($nodeAssignment);
        //must todo 对于不是发起人的用户发送短信通知，这个repository类，在属性 $notifyTasks里面添加，然后processor在处理完后统一一次性拿出，发通知
    }

    /**
     * @param \WorkflowBundle\Entity\NodeAssignment $nodeAssignment
     * @throws \Doctrine\ORM\OptimisticLockException
     * @return NodeAssignment[]
     */
    public function getPrevSimilarNodeAssignmentList($nodeAssignment)
    {
        $qb = $this->createQueryBuilder("na")
            ->where('na.shopId = :shopId')
            ->andWhere('na.id < :curId')
            ->andWhere('na.assignedStaffId = :assignedStaffId')
            ->andWhere('na.assignedNode = :assignedNode')
            ->andWhere('na.workflowClassName = :workflowClassName')
            ->andWhere('na.workflowId = :workflowId')
            ->andWhere('na.assignedTime > :notAllowedTime')
            ->andWhere('na.nodeStatus = :statusNew')
            ->setParameter('shopId', $nodeAssignment->getShopId())
            ->setParameter('curId', $nodeAssignment->getId())
            ->setParameter('assignedStaffId', $nodeAssignment->getAssignedStaffId())
            ->setParameter('assignedNode', $nodeAssignment->getAssignedNode())
            ->setParameter('workflowClassName', $nodeAssignment->getWorkflowClassName())
            ->setParameter('workflowId', $nodeAssignment->getWorkflowId())
            ->setParameter('statusNew', NodeAssignment::STATUS_NEW)
            ->setParameter('notAllowedTime', time() - 10)
        ;
        $qb->orderBy("na.id","desc");
        $query = $qb->getQuery();
        return $query->getResult();
    }

}
